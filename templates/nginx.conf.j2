daemon off;
pid /run/nginx.pid;

worker_processes 4;

error_log stderr;

events {
    worker_connections 1024;
}

http {
    # Set DNS resolver address
    resolver {{ resolver_ip }} valid=300s;

    # Replace proxy IPs with the real user IP
    real_ip_header X-Forwarded-For;

    # Replace connection IP and X-Forwarded-For IPs
    # from the PaaS router, localhost and Cloudfront
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 127.0.0.1/32;

    {% for cloudfront_ip in cloudfront_ips.split(",") %}
    set_real_ip_from {{ cloudfront_ip }};
    {% endfor %}

    # Ignore trusted IPs in X-Forwarded-For
    real_ip_recursive on;

    # a few good practice security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Xss-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://www.google-analytics.com; img-src 'self' data:; style-src 'self' 'unsafe-inline'; connect-src 'self' https://www.google-analytics.com; connect-src 'self' https://digitalmarketplace-documents-preview-preview.s3.amazonaws.com; object-src 'self' https://assets.digitalmarketplace.service.gov.uk; frame-src 'self' https://assets.digitalmarketplace.service.gov.uk;" always;
    add_header Permissions-Policy "interest-cohort=()" always;

    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Raise bucket size for long domain names
    server_names_hash_bucket_size 128;

    # Set max request size (up to 4 files x 10Mb size limit)
    client_max_body_size 40m;

    # default is 1.0, which prevents paas from doing some keepalive magick
    proxy_http_version 1.1;

{% if rate_limiting_enabled == "enabled" %}
    # Basic rate limiting (return 429 Too Many Requests instead of default 503)
    # None of these default limits include a burst. A burst is included in the www.j2 template
    map $request_method $post_remote_addr {
      default      "";
      POST         $binary_remote_addr;
    }
    # Requests are by default limited to 3 requests/second/router instance, POST requests to 2
    # requests/second/router instance.
    # As of February 2021, there are normally 6 router instances.
    limit_req_zone $binary_remote_addr zone=dm_limit:10m rate=3r/s;
    limit_req_zone $post_remote_addr zone=dm_post_limit:10m rate=2r/s;
    limit_req_status 429;
{% endif %}

    # Set variable indicating to strip out trace/debug headers coming from external (non-GDS/non-dev) IPs

    map $remote_addr $strip_trace_headers {
      default 1;

{% for dev_ip in dev_user_ips.split(",") %}
      {{ dev_ip.split('/')[0] }} 0;
{% endfor %}
    }

    # nginx isn't very good at randomness, so use the value of the traceid header to drive our "random sampling"
    # decision as it should have been chosen randomly enough upstream
    map $http_x_b3_traceid $random_sample {
        default 0;

        # if the second and fourth nibbles of the traceid are 'f', indicate that sampling should be enabled for this
        # request. should result in one in 256 requests being sampled. why two arbitrarily chosen nibbles? we don't
        # want this selection to accidentally correlate with anything else that may be using traceid for a stochastic
        # decision, and it's less likely anything else will have chosen exactly these nibbles
        ~*^.f.f.* 1;
    }

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging Settings

    map $content_length $content_length_or_zero {
        default 0;
        ~^\d+$ $content_length;
    }

    # the various $upstream_*_times are encoded as strings as they potentially could be multiple values comma-separated
    log_format access_json escape=json '{"logType": "nginx-access", '
                           ' "requestId": "$http_x_b3_traceid", '
                           ' "spanId": "$http_x_b3_spanid", '
                           ' "parentSpanId": "$http_x_b3_parentspanid", '
                           ' "isSampled": "$http_x_b3_sampled", '
                           ' "debugFlag": "$http_x_b3_flags", '
                           ' "remoteHost": "$remote_addr", '
                           ' "user": "$remote_user", '
                           ' "time": "$time_local", '
                           ' "epochTime": $msec, '
                           ' "request": "$request", '
                           ' "status": $status, '
                           ' "size": $body_bytes_sent, '
                           ' "requestSize": $content_length_or_zero, '
                           ' "referer": "$http_referer", '
                           ' "userAgent": "$http_user_agent", '
                           ' "requestTime": $request_time, '
                           ' "upstreamConnectTime": "$upstream_connect_time", '
                           ' "upstreamHeaderTime": "$upstream_header_time", '
                           ' "upstreamResponseTime": "$upstream_response_time", '
                           ' "httpHost": "$http_host"}';

    access_log /dev/stdout access_json;

    # Virtual Host Configs

    include /etc/nginx/sites-enabled/*;
}
